package rdx.gateway.challenge.coremodel;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * VirtualParentData
 */

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EpochData.class, name = "EpochData"),
  @JsonSubTypes.Type(value = PreparedValidatorFee.class, name = "PreparedValidatorFee"),
  @JsonSubTypes.Type(value = PreparedValidatorOwner.class, name = "PreparedValidatorOwner"),
  @JsonSubTypes.Type(value = PreparedValidatorRegistered.class, name = "PreparedValidatorRegistered"),
  @JsonSubTypes.Type(value = RoundData.class, name = "RoundData"),
  @JsonSubTypes.Type(value = TokenData.class, name = "TokenData"),
  @JsonSubTypes.Type(value = TokenMetadata.class, name = "TokenMetadata"),
  @JsonSubTypes.Type(value = UnclaimedRadixEngineAddress.class, name = "UnclaimedRadixEngineAddress"),
  @JsonSubTypes.Type(value = ValidatorAllowDelegation.class, name = "ValidatorAllowDelegation"),
  @JsonSubTypes.Type(value = ValidatorBFTData.class, name = "ValidatorBFTData"),
  @JsonSubTypes.Type(value = ValidatorData.class, name = "ValidatorData"),
  @JsonSubTypes.Type(value = ValidatorMetadata.class, name = "ValidatorMetadata"),
  @JsonSubTypes.Type(value = ValidatorSystemMetadata.class, name = "ValidatorSystemMetadata"),
  @JsonSubTypes.Type(value = VirtualParentData.class, name = "VirtualParentData")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class VirtualParentData extends DataObject {

  @JsonProperty("entity_set_identifier")
  private EntitySetIdentifier entitySetIdentifier;

  @JsonProperty("virtual_data_object")
  private DataObject virtualDataObject;

  public VirtualParentData entitySetIdentifier(EntitySetIdentifier entitySetIdentifier) {
    this.entitySetIdentifier = entitySetIdentifier;
    return this;
  }

  /**
   * Get entitySetIdentifier
   * @return entitySetIdentifier
  */
  @NotNull @Valid 
  public EntitySetIdentifier getEntitySetIdentifier() {
    return entitySetIdentifier;
  }

  public void setEntitySetIdentifier(EntitySetIdentifier entitySetIdentifier) {
    this.entitySetIdentifier = entitySetIdentifier;
  }

  public VirtualParentData virtualDataObject(DataObject virtualDataObject) {
    this.virtualDataObject = virtualDataObject;
    return this;
  }

  /**
   * Get virtualDataObject
   * @return virtualDataObject
  */
  @NotNull @Valid 
  public DataObject getVirtualDataObject() {
    return virtualDataObject;
  }

  public void setVirtualDataObject(DataObject virtualDataObject) {
    this.virtualDataObject = virtualDataObject;
  }

  public VirtualParentData type(String type) {
    super.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualParentData virtualParentData = (VirtualParentData) o;
    return Objects.equals(this.entitySetIdentifier, virtualParentData.entitySetIdentifier) &&
        Objects.equals(this.virtualDataObject, virtualParentData.virtualDataObject) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entitySetIdentifier, virtualDataObject, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualParentData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    entitySetIdentifier: ").append(toIndentedString(entitySetIdentifier)).append("\n");
    sb.append("    virtualDataObject: ").append(toIndentedString(virtualDataObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

